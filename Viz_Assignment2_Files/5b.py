# -*- coding: utf-8 -*-
"""5b

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-YWisS5-r2jq3JDIioZzHTMlnOq15BdH
"""

import numpy as np
import matplotlib.pyplot as plt

# First we will load our dataset
field_values = np.load("scalars_2D.npy")
num_rows, num_cols = field_values.shape

# Setting up the threshold value
threshold = 50

#Defining the function to plot the graph
def plot_point(axis, x_coord, y_coord, point_color):
    axis.plot(x_coord, y_coord, marker='o', color=point_color, markersize=5)
    # axis.show()

def plot_line(axis, x_start, y_start, x_end, y_end):
    axis.plot([x_start, x_end], [y_start, y_end], color='blue', linewidth=2)
    # axis.show()

# We will Initialize the certain values such as:
fig, axis = plt.subplots(figsize=(8, 8))
axis.set_xlim(-0.5, num_cols - 0.5)
axis.set_ylim(-0.5, num_rows - 0.5)
axis.set_xticks(range(num_cols))
axis.set_yticks(range(num_rows))
axis.grid(True)

# Next we will Iterate through the matrix cells
for row in range(num_rows - 1):
    for col in range(num_cols - 1):
        # We then find the central position of the cell
        mid_x = col + 0.5
        mid_y = row + 0.5

        # Here we basically defining the color of the shape
        point_color = 'red' if field_values[row, col] > threshold else 'black'
        #point_color.show()

        # We then plot the point the given points
        plot_point(axis, mid_x, mid_y, point_color)
        #plot_point.show()

# Here we start to create our Marching Squares algorithm
for row in range(num_rows - 1):
    for col in range(num_cols - 1):
        # We are getting the cell values here
        top_left = field_values[row, col] > threshold
        top_right = field_values[row, col+1] > threshold
        bottom_left = field_values[row+1, col] > threshold
        bottom_right = field_values[row+1, col+1] > threshold
        case_index = (top_left << 3) | (top_right << 2) | (bottom_right << 1) | bottom_left

        # Then we define our edge midpoints
        mid_top = (col + 0.5, row)
        mid_bottom = (col + 0.5, row + 1)
        mid_left = (col, row + 0.5)
        mid_right = (col + 1, row + 0.5)

        # We then just create the lookup table for Marching Squares cases
        case_lines = {
            1: [mid_left, mid_bottom],
            2: [mid_bottom, mid_right],
            3: [mid_left, mid_right],
            4: [mid_top, mid_right],
            5: [mid_top, mid_left, mid_bottom, mid_right],
            6: [mid_top, mid_bottom],
            7: [mid_top, mid_left],
            8: [mid_top, mid_left],
            9: [mid_top, mid_bottom],
            10: [mid_top, mid_right, mid_left, mid_bottom],
            11: [mid_top, mid_right],
            12: [mid_left, mid_right],
            13: [mid_bottom, mid_right],
            14: [mid_left, mid_bottom],
        }

        # We finally then draw the lines for the identified case
        if case_index in case_lines:
            points = case_lines[case_index]
            for k in range(0, len(points), 2):
                #print("Value of k:",k)
                plot_line(axis, *points[k], *points[k+1])

plt.gca().invert_yaxis()
plt.show()

