# -*- coding: utf-8 -*-
"""4_3

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J7fiWTCFyokIFPVTRXj0LCz3pQLi67LL
"""

#!/usr/bin/env python3

import numpy as np
import matplotlib.pyplot as plt

# Set the random seed for reproducibility
np.random.seed(42)

# Generate 15 random seed points within the range [0, 19] in both dimensions
seed_points = np.random.randint(0, 20, size=(15, 2))

# Get data
vecs = np.reshape(np.fromfile("wind_vectors.raw"), (20, 20, 2))
vecs = vecs.transpose(1, 0, 2)  # needed otherwise vectors don't match with plot

# Function to perform bilinear interpolation
def bilinear_interpolation(x, y, grid):
    x0, y0 = int(x), int(y)
    x1, y1 = x0 + 1, y0 + 1

    # Bound the indices to the grid size
    x0 = max(0, min(x0, 19))
    x1 = max(0, min(x1, 19))
    y0 = max(0, min(y0, 19))
    y1 = max(0, min(y1, 19))

    # Get the four neighboring vectors
    Q11 = grid[x0, y0]
    Q21 = grid[x1, y0]
    Q12 = grid[x0, y1]
    Q22 = grid[x1, y1]

    # Perform bilinear interpolation
    dx = x - x0
    dy = y - y0
    interpolated = (Q11 * (1 - dx) * (1 - dy) +
                   Q21 * dx * (1 - dy) +
                   Q12 * (1 - dx) * dy +
                   Q22 * dx * dy)

    return interpolated

# Function to trace a streamline
def trace_streamline(start_point, grid, time_step, steps):
    x, y = start_point
    streamline = [start_point]

    for _ in range(steps):
        # Get the interpolated vector at the current point
        vector = bilinear_interpolation(x, y, grid)

        # Update the position
        x += vector[0] * time_step
        y += vector[1] * time_step

        # Bound the points to the grid
        x = max(0, min(x, 19))
        y = max(0, min(y, 19))

        streamline.append((x, y))

        # Stop if we reach the boundary
        if x <= 0 or x >= 19 or y <= 0 or y >= 19:
            break

    return np.array(streamline)

# X and Y coordinates of points where each vector is in space
xx, yy = np.meshgrid(np.arange(0, 20), np.arange(0, 20))

# Function to plot streamlines with given parameters
def plot_streamlines(time_step, steps, title):
    streamlines = [trace_streamline(point, vecs, time_step, steps) for point in seed_points]

    plt.figure()
    plt.plot(xx, yy, marker='.', color='b', linestyle='none')
    plt.quiver(xx, yy, vecs[:, :, 0], vecs[:, :, 1], width=0.001)

    # Plot the seed points and streamlines
    plt.scatter(seed_points[:, 0], seed_points[:, 1], color='red', label='Seed Points')
    for streamline in streamlines:
        plt.plot(streamline[:, 0], streamline[:, 1], color='green', marker='o', markersize=3)

    plt.title(title)
    plt.legend()
    plt.show()

# Plot streamlines for the four sets of parameters
plot_streamlines(time_step=0.15, steps=16, title="Step Size 0.15, Steps 16")
plot_streamlines(time_step=0.075, steps=32, title="Step Size 0.075, Steps 32")
plot_streamlines(time_step=0.0375, steps=64, title="Step Size 0.0375, Steps 64")